// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Planner_chat_server.Infrastructure.Data;

#nullable disable

namespace Planner_chat_server.Infrastructure.Migrations
{
    [DbContext(typeof(ChatDbContext))]
    [Migration("20240727064654_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Planner_chat_server.Core.Entities.Models.AccountChatSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatMembershipId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateLastViewing")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChatMembershipId");

                    b.HasIndex("SessionId");

                    b.ToTable("AccountChatSessions");
                });

            modelBuilder.Entity("Planner_chat_server.Core.Entities.Models.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<Guid?>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("Planner_chat_server.Core.Entities.Models.ChatMembership", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateLastViewing")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ChatId");

                    b.ToTable("ChatMemberships");
                });

            modelBuilder.Entity("Planner_chat_server.Core.Entities.Models.ChatMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("Planner_chat_server.Core.Entities.Models.AccountChatSession", b =>
                {
                    b.HasOne("Planner_chat_server.Core.Entities.Models.ChatMembership", "ChatMembership")
                        .WithMany("UserChatSessions")
                        .HasForeignKey("ChatMembershipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatMembership");
                });

            modelBuilder.Entity("Planner_chat_server.Core.Entities.Models.ChatMembership", b =>
                {
                    b.HasOne("Planner_chat_server.Core.Entities.Models.Chat", "Chat")
                        .WithMany("ChatMemberships")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("Planner_chat_server.Core.Entities.Models.ChatMessage", b =>
                {
                    b.HasOne("Planner_chat_server.Core.Entities.Models.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("Planner_chat_server.Core.Entities.Models.Chat", b =>
                {
                    b.Navigation("ChatMemberships");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Planner_chat_server.Core.Entities.Models.ChatMembership", b =>
                {
                    b.Navigation("UserChatSessions");
                });
#pragma warning restore 612, 618
        }
    }
}
