// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Planer_task_board.Infrastructure.Data;

#nullable disable

namespace Planer_task_board.Infrastructure.Migrations
{
    [DbContext(typeof(ContentDbContext))]
    [Migration("20240727091350_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Planer_task_board.Core.Entities.Models.Board", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Boards");
                });

            modelBuilder.Entity("Planer_task_board.Core.Entities.Models.BoardColumn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BoardId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.ToTable("BoardColumns");
                });

            modelBuilder.Entity("Planer_task_board.Core.Entities.Models.BoardColumnMember", b =>
                {
                    b.Property<Guid>("ColumnId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ColumnId", "AccountId");

                    b.ToTable("BoardColumnMembers");
                });

            modelBuilder.Entity("Planer_task_board.Core.Entities.Models.BoardColumnTask", b =>
                {
                    b.Property<Guid>("ColumnId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.HasKey("ColumnId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("BoardColumnTasks");
                });

            modelBuilder.Entity("Planer_task_board.Core.Entities.Models.BoardMember", b =>
                {
                    b.Property<Guid>("BoardId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("BoardId", "AccountId");

                    b.ToTable("BoardMembers");
                });

            modelBuilder.Entity("Planer_task_board.Core.Entities.Models.DeletedTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExistBeforeDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TaskId")
                        .IsUnique();

                    b.ToTable("DeletedTasks");
                });

            modelBuilder.Entity("Planer_task_board.Core.Entities.Models.TaskAttachedMessage", b =>
                {
                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid");

                    b.HasKey("TaskId", "MessageId");

                    b.ToTable("TaskAttachedMessage");
                });

            modelBuilder.Entity("Planer_task_board.Core.Entities.Models.TaskModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAtDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("DraftOfTaskId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("HexColor")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("boolean");

                    b.Property<int>("PriorityOrder")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DraftOfTaskId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Planer_task_board.Core.Entities.Models.TaskPerformer", b =>
                {
                    b.Property<Guid>("PerformerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.HasKey("PerformerId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskPerformers");
                });

            modelBuilder.Entity("Planer_task_board.Core.Entities.Models.BoardColumn", b =>
                {
                    b.HasOne("Planer_task_board.Core.Entities.Models.Board", "Board")
                        .WithMany("Columns")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");
                });

            modelBuilder.Entity("Planer_task_board.Core.Entities.Models.BoardColumnMember", b =>
                {
                    b.HasOne("Planer_task_board.Core.Entities.Models.BoardColumn", "Column")
                        .WithMany("Members")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Column");
                });

            modelBuilder.Entity("Planer_task_board.Core.Entities.Models.BoardColumnTask", b =>
                {
                    b.HasOne("Planer_task_board.Core.Entities.Models.BoardColumn", "Column")
                        .WithMany("Tasks")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Planer_task_board.Core.Entities.Models.TaskModel", "Task")
                        .WithMany("Columns")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Column");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Planer_task_board.Core.Entities.Models.BoardMember", b =>
                {
                    b.HasOne("Planer_task_board.Core.Entities.Models.Board", "Board")
                        .WithMany("Members")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");
                });

            modelBuilder.Entity("Planer_task_board.Core.Entities.Models.DeletedTask", b =>
                {
                    b.HasOne("Planer_task_board.Core.Entities.Models.TaskModel", "Task")
                        .WithOne("DeletedTask")
                        .HasForeignKey("Planer_task_board.Core.Entities.Models.DeletedTask", "TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Planer_task_board.Core.Entities.Models.TaskAttachedMessage", b =>
                {
                    b.HasOne("Planer_task_board.Core.Entities.Models.TaskModel", "Task")
                        .WithMany("AttachedMessages")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Planer_task_board.Core.Entities.Models.TaskModel", b =>
                {
                    b.HasOne("Planer_task_board.Core.Entities.Models.TaskModel", "DraftOfTask")
                        .WithMany()
                        .HasForeignKey("DraftOfTaskId");

                    b.Navigation("DraftOfTask");
                });

            modelBuilder.Entity("Planer_task_board.Core.Entities.Models.TaskPerformer", b =>
                {
                    b.HasOne("Planer_task_board.Core.Entities.Models.TaskModel", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Planer_task_board.Core.Entities.Models.Board", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Members");
                });

            modelBuilder.Entity("Planer_task_board.Core.Entities.Models.BoardColumn", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Planer_task_board.Core.Entities.Models.TaskModel", b =>
                {
                    b.Navigation("AttachedMessages");

                    b.Navigation("Columns");

                    b.Navigation("DeletedTask");
                });
#pragma warning restore 612, 618
        }
    }
}
